1)Find the Nth Fibonacci number

Problem Description
Given an integer n, you have to find the nth fibonacci number. The fibonacci sequence is given by 0,1,1,2,3,5,8,... where 0 and 1 are the 0th and 1st fibonacci numbers respectively and every consecutive number is the sum of the previous two numbers in the sequence.

Input format
There is one line of input, containing an integer n.

Output format
Print the nth fibonacci number.

Sample Input 1
3

Sample Output 1
2

Explanation 1
3rd fibonacci number is equal to the sum of 1st and 2nd fibonacci numbers i.e. 1 + 1 = 2.

Constraints
0 <= n <= 20

Resource
Fibonacci series in Java (https://www.javatpoint.com/fibonacci-series-in-java)

Nth Fibonacci Number(https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/)

-----------------------------------------------------------------Solution-----------------------------------------------------------------------------------
def nthFibonacciNumber(n):
    a=0
    b=1
    for i in range(n):
        a,b=b,a+b
    return a

def main():
    n = int(input())
    result = nthFibonacciNumber(n)
    print(result)

if __name__=="__main__":
    main()
-------------------------------------------------------------------------------------------------------------------------------------------------------------
2)Find trailing zeroes in factorial of a number [Crio Methodology + Debugging Video]

Problem Description
Write a program that outputs the number of trailing zeroes in n!(n factorial).

Input format
One line of input, containing the integer n.

Output format
Print a single integer that contains the number of trailing zeros in n!

Sample Input 1
5

Sample Output 1
1

Explanation 1
5! = 120, one trailing zero.

Constraints
1 <= N <= 10^18

Resource
Count trailing zeroes in the factorial of an integer (https://www.geeksforgeeks.org/count-trailing-zeroes-factorial-number/)

Time complexity analysis of Loops (https://www.geeksforgeeks.org/analysis-of-algorithms-set-4-analysis-of-loops/)

---------------------------------------------------------------Solution-----------------------------------------------------------------------------------
def findTrailingZeros(n):
    count = 0

    while(n >= 5):
        n //= 5
        count += n
 
    return count
n = int(input())
result = findTrailingZeros(n)
print(result)
---------------------------------------------------------------------------------------------------------------------------------------------------------
3)Factorial of given number [Crio Methodology + Debugging Video]

Problem Description
Given a number n, you have to calculate the factorial of that number.

Input format
First line contains an integer - n.

Output format
Print the factorial of the given number.

Sample Input 1
3

Sample Output 1
6

Explanation 1
3! = 3.2.1 = 6

Constraints
0 <= n <= 10

Resource
Program for factorial(https://www.geeksforgeeks.org/program-for-factorial-of-a-number/)
Crio Methodology
https://youtu.be/embed/QgLYTpg8y88

--------------------------------------------------------------------Solution-----------------------------------------------------------------------------------
def factorial(n):
    f=1
    for i in range(1,n+1):
        f=f*i
    return f
def main():
    n = int(input())

    ans = factorial(n)
    print(ans)


if __name__ == "__main__":
    main()
---------------------------------------------------------------------------------------------------------------------------------------------------------
4)Find numbers coprime to given number

Problem Description
Given a number n, you have to find the count of the numbers from 1 to n that are coprime to n.

Input format
One line of input, containing an integer n - the given number.

Output format
Print the total count of coprime numbers.

Sample Input 1
9

Sample Output 1
6

Explanation 1
Numbers coprime to 9 are: 1, 2, 4, 5, 7, 8

Constraints
1 <= n <= 1000

Resource
Check if two numbers are co-prime or not (https://www.geeksforgeeks.org/check-two-numbers-co-prime-not/)

Euler's Totient Function (https://www.geeksforgeeks.org/eulers-totient-function/)

-------------------------------------------------------Solution-----------------------------------------------------------------------------------
def coprimeNumbers(n):
    coPrime=0
    for i in range(n):
        if gcd(i,n) ==1:
            coPrime+=1
    return(coPrime)

def gcd(n1,n2):
    if n2==0:
        return n1
    else:
        return gcd(n2,n1%n2)

def main():
    n = int(input().strip())

    countCoPrime = coprimeNumbers(n)
    print(countCoPrime)


if __name__ == "__main__":
    main()
---------------------------------------------------------------------------------------------------------------------------------------------------------
5)Print odd numbers upto n

Problem Description
Given a number N, you have to print all the odd numbers upto N in increasing order.

Input format
One line of input, containing an integer - N.

Output format
Print the numbers space-separated in a single line in increasing order.

Sample Input 1
5

Sample Output 1
1 3 5

Constraints
1 <= N <= 100

Resource
Print all odd numbers from 1 to n - C (https://codeforwin.org/2015/06/c-program-to-print-all-odd-numbers-between-1-to-100.html)

Print all odd numbers from 1 to n - Python (https://www.geeksforgeeks.org/python-program-to-print-all-odd-numbers-in-a-range/)

-----------------------------------------------------------Solution-----------------------------------------------------------------------------------
def oddNumbers(n):
    odd=[]
    for i in range(n+1):
        if i%2==1:
            odd.append(i)
    return odd

def main():
    n = int(input())

    ans = oddNumbers(n)
    print(*ans)


if __name__ == "__main__":
    main()
---------------------------------------------------------------------------------------------------------------------------------------------------------
6)Sum of given series - 1

Problem Description
Find the sum of the series 1 x 3 + 3 x 5 + 5 x 7 + ... upto n terms.

Input format
One line of input, containing an integer - n.

Output format
Print the sum of the series.

Sample Input 1
3

Sample Output 1
53

Explanation 1
Expanding the first 3 terms: 1 x 3 + 3 x 5 + 5 x 7 = 3 + 15 + 35 = 53

Constraints
0 < n < 100

Resource
Sum of series 13-35 (https://www.geeksforgeeks.org/program-to-find-sum-of-the-series-13-35/)

--------------------------------------------------------------Solution-----------------------------------------------------------------------------------
def seriesSumI(n):
    Sum=0
    for i in range(1,n+1):
        Sum+=( ( (2*i)+1 ) * ( (2*i) -1) )
    return Sum

def main():
    n = int(input())

    ans = seriesSumI(n)

    print(ans)


if __name__ == "__main__":
    main()
---------------------------------------------------------------------------------------------------------------------------------------------------------
7)Find factors of given number and their sum

Problem Description
Given an integer N, find the number of distinct factors and the sum of these factors.

Input format
One line of input, containing the integer N.

Output format
Print two space separated integers, first integer representing the number of distinct factors, second would be the sum of factors.

Sample Input 1
4

Sample Output 1
3 7

Constraints
0 <= N <= 100

Explanation
The factors of 4 are 1,2,4 and their sum is 7.

Resource
Find factors of natural number - 1 (https://www.geeksforgeeks.org/find-divisors-natural-number-set-1/)

Find factors of a natural number - 2 (https://www.geeksforgeeks.org/find-all-divisors-of-a-natural-number-set-2/)

-----------------------------------------------Solution-----------------------------------------------------------------------------------
def numberOfDivisorsAndSum(n):
    fac=[]
    count=0
    Sum=0
    for i in range(1,n+1):
        if n%i==0:
            count+=1
            Sum+=i
    fac.append(count)
    fac.append(Sum)
    return fac
def main():
    n = int(input())
    list=numberOfDivisorsAndSum(n)
    print(*list)

if __name__=="__main__":
    main()
---------------------------------------------------------------------------------------------------------------------------------------------------------
8)Check if given number is prime

Problem Description
Given a number, find if it is a prime number or not. This question may also be phrased in interviews as ‘check for primality’.

Input format
There are T+1 lines of input.

First line will contain a number T, the number of test cases.

Each of the next T lines contains an integer N.

Output format
In each line print "true" if it is a prime number otherwise "false". Ensure all lowercase to pass all tests.

Sample Input 1
2

1

2

Sample Output 1
false

true

Constraints
1 <= T <= 10

0 <= N <= 500

Explanation
1 is not a prime number whereas 2 is a prime.

Resource
Number Theory: Primality Test in O(sqrt(n)) (https://dev.to/priyanka__488/number-theory-primality-test-in-o-sqrt-n-dde)

Sieve of Eratosthenes (https://www.geeksforgeeks.org/sieve-of-eratosthenes/)

---------------------------------------------------------------Solution-----------------------------------------------------------------------------------
import math
def checkPrime(t, nums):
    res=[]
    for i in nums:
        f=0
        if i <= 1:
            res.append(False)
            continue
        for j in range (2, int(math.sqrt(i))+1):
            if  i % j == 0:
                res.append(False)
                f=1
                break
        if f==0:
            res.append(True)
    return res
def main():
    t = int(input())
    nums = []
    for i in range(0,t):
        n = int(input())
        nums.append(n)
    ans = checkPrime(t,nums)

    for i in ans:
        if(i == False):
            print("false")
        else:
            print("true")


if __name__=="__main__":
    main()
---------------------------------------------------------------------------------------------------------------------------------------------------------
9)Find the largest number

Problem Description
Given 3 numbers a,b,c. Find the largest among them.

Input format
First line contains 3 space separated numbers - a, b, c

Output format
Print the largest number.

Sample Input 1
2 4.5 3

Sample Output 1
4.5

Constraints
-100 < a,b,c < 100

Resource
https://www.geeksforgeeks.org/c-program-to-find-the-largest-number-among-three-numbers/

---------------------------------------------------------------Solution-----------------------------------------------------------------------------------
def findLargestNumber(a, b, c):
    return max(a,b,c)

def main():
    a, b, c = map(float, input().split(' '))
    ans = findLargestNumber(a, b, c)
    if(ans.is_integer()):
        ans = int(ans)
    print(ans)  


if __name__ == "__main__":
    main()
---------------------------------------------------------------------------------------------------------------------------------------------------------
10)Find the grade

Problem Description
A school has following rules for grading system:

[0, 25) - F

[25, 45) - E

[45, 50) - D

[50, 60) - C

[60, 80) - B

[80, 100] - A

If the input is less than 0 or greater than 100 then it is considered invalid.

You are given a real number score, print the corresponding grade or "Invalid" if the input is invalid.

Input format
First line contains a real number - The score.

Output format
Print the corresponding grade or "Invalid" if the input is invalid.

Sample Input 1
83.5

Sample Output 1
A

Sample Input 2
42

Sample Output 2
E

Constraints
Score can be any real number.

Resource
https://tutorialsinhand.com/tutorials/java-programs/java-if-else-programs/java-grade-program.aspx


----------------------------------------------------------Solution-----------------------------------------------------------------------------------
def gradingSystem(score):
    if score>=0 and score<25:
        return "F"
    elif score>=25 and score<45:
        return "E"
    elif score>=45 and score<50:
        return "D"
    elif score>=50 and score<60:
        return "C"
    elif score>=60 and score<80:
        return "B"
    elif score>=80 and score<=100:
        return "A"
    else:
        return "Invalid"
def main():
    score = float(input())
    grade = gradingSystem(score)
    print(grade)

if __name__=="__main__":
    main()
---------------------------------------------------------------------------------------------------------------------------------------------------------
11)Find the quadrant

Problem Description
Given coordinates of a point (x,y) in 2D plane, find in which quadrant does this point lie.

Input format
First line contains 2 space separated real numbers - x coordinate, y coordinate.

Output format
Print 1, 2, 3 or 4 depending on in which quadrant does the point lie.

Sample Input 1
-5.5 2

Sample Output 1
2

Explanation 1
The x-coordinate is negative and the y-coordinate is positive which means the point lies in the 2nd quadrant.

Sample Input 2
1 -1

Sample Output 2
4

Explanation 2
The x-coordinate is positive and the y-coordinate is negative which means the point lies in the 4th quadrant.

Constraints
-100 < x, y < 100

Neither x nor y is 0.

Resource
https://www.geeksforgeeks.org/program-determine-quadrant-cartesian-plane/

-----------------------------------------------------------Solution-----------------------------------------------------------------------------------
def findQuadrant(x, y):
    if (x>0 and y>0):
        return 1
    elif (x<0 and y>0):
        return 2
    elif (x<0 and y<0):
        return 3
    else:
        return 4

def main():
    x, y = map(float, input().split(' '))
    quadrant = findQuadrant(x, y)
    print(quadrant)


if __name__ == "__main__":
    main()

---------------------------------------------------------------------------------------------------------------------------------------------------------
12)Convert number from decimal to given base

Problem Description
Given two numbers n in decimal and b you have to calculate the value of that number in base b.

Input format
First line contains two integers - n and b.

Output format
Print the value of that number in base b

Sample Input 1
10 2

Sample Output 1
1010

Constraints
0 <= n <= 1000

2 <= b <= 16

Explanation
The value 10 in binary form is 1010.

Resource
https://www.geeksforgeeks.org/convert-base-decimal-vice-versa/


---------------------------------------------------Solution-----------------------------------------------------------------
1)import math 
def decimalToBaseConversion(num, base):
    remMap="0123456789ABCDEF"
    res=[]
    while num>0:
        rem=num%base
        ch=remMap[int(rem)]
        res.insert(0,ch)
        num//=base
    return "".join(res) 

def main():
    num, base = map(int, input().split(' '))
    ans = decimalToBaseConversion(num, base)
    print(ans)


if __name__ == "__main__":
    main()

2)import math 
def decimalToBaseConversion(num, base):
    res=[]
    hexa={10:'A',11:'B',12:'C',13:'D',14:'E',15:'F'}
    while num>0:
        rem=num%base
        if rem in hexa:
            res.append(hexa[rem])
        else:
            res.append(rem)
        num=num//base
    Sum=""
    for i in res[::-1]:
        Sum+=str(i)
    return (Sum)

def main():
    num, base = map(int, input().split(' '))
    ans = decimalToBaseConversion(num, base)
    print(ans)


if __name__ == "__main__":
    main()

---------------------------------------------------------------------------------------------------------------------------------------------------------
13)Add two integers represented as strings [Crio Methodology Video]

Problem Description
There are two numbers, given as strings. The numbers may be very large (may not fit even in long long int). You need to find the sum of these two numbers.

Input format
First line contains two space separated strings s1 and s2.

Output format
An integer representing the sum of s1 and s2..

Sample Input 1
10 24

Sample Output 1
34

Constraints
1 <= |s1| , |s2| <= 500.

Where |s| is the length of s, in this case the number of digits in the number.

Explanation
The sum of 10 and 24 is 34.

Resource
Sum of two large numbers (https://www.geeksforgeeks.org/sum-two-large-numbers/)

Video URL (https://youtu.be/c6rHm4gYjBk)

------------------------------------------------------------Solution-----------------------------------------------------------------------------------
def bigIntegerAddition(str1, str2):
    if (len(str1) > len(str2)):
        t = str1;
        str1 = str2;
        str2 = t;
        
    str = "";
 
    n1 = len(str1);
    n2 = len(str2);
 
    str1 = str1[::-1];
    str2 = str2[::-1];
 
    carry = 0;
    for i in range(n1):
        sum = ((ord(str1[i]) - 48) +
              ((ord(str2[i]) - 48) + carry));
        str += chr(sum % 10 + 48);
 
        carry = int(sum / 10);
 
    for i in range(n1, n2):
        sum = ((ord(str2[i]) - 48) + carry);
        str += chr(sum % 10 + 48);
        carry = (int)(sum / 10);
 
    if (carry):
        str += chr(carry + 48);

    str = str[::-1];
    return str;

def main():
    s1, s2 = input().split()
    add = bigIntegerAddition(s1, s2)
    print(add)


if __name__ == "__main__":
    main()
---------------------------------------------------------------------------------------------------------------------------------------------------------
14)Factorial of a large number

Problem Description
Given a single integer, find its factorial. Since factorials of large numbers cannot be stored in a primitive data type, you have to return the answer as an array of digits, instead of a single number.

Input format
First line contains an integer N.

Output format
A vector of numbers denoting the factorial of the given number.

Sample Input 1
5

Sample Output 1
[1,2,0]

Constraints
1 <= N <= 100

Explanation
5! = 1 x 2 x 3 x 4 x 5 = 120.

Resource
Return factorial of a large number as array of digits

------------------------------------------------------------Solution-----------------------------------------------------------------------------------
def largeFactorial(num):
    f=1
    for i in range(1,num+1):
        f=f*i
    return f
def main():
    num = int(input())
    factorial = largeFactorial(num)
    print(factorial)

if __name__=="__main__":
    main()

---------------------------------------------------------------------------------------------------------------------------------------------------------
15)Reorder the string

Problem Description
Given a string, you have to rearrange the characters of the string in the given order. A reordering of characters of a string is called a permutation of the string.

The order is in the form of an integer array with size same as that of string, in which each integer specifies the new position of the character currently present at that particular place.

For eg. consider the string "abcd" and permutation [2,4,3,1], then the new string will be "dacb".

Input format
There are three lines of input.

First line contains an integer n - The length of string.

Second line contains the string

Third line contains n space separated integers - the new order.

Output format
Print the new string after applying the permutation.

Sample Input 1
4

abcd

2 4 3 1

Sample Output 1
dacb

Explanation 1
According to the permutation 'a' goes to position 2, 'b' to 4, 'c' to 3, 'd' to 1. So we get the new string as "dacb".

Constraints
0 < n < 100

1 <= a[i] <= n

Where a[i] refers to each element of the order array a.
------------------------------------------------------------Solution-----------------------------------------------------------------------------------
def stringPermutation(n, s, per):
    Dict={}
    new=""
    for i in range(n):
        Dict[per[i]]=s[i]
    for k in sorted(Dict.keys()):
        new+=Dict[k]
    return new
def main():
    n = int(input())
    s = input()
    per = list(map(int, input().strip().split(' ')))

    result = stringPermutation(n, s, per)
    print(result)

if __name__=="__main__":
    main()


---------------------------------------------------------------------------------------------------------------------------------------------------------
16) Sum of given series - 2

Problem Description
Given first term A and common ratio R(R<1), find the sum of an infinite GP series.

Your answer should be accurate upto 5 decimal places.

Input format
First line contains 2 numbers - A, R.

Output format
Print the sum of the series correctly upto 5 decimal places.

Sample Input 1
1 0.5

Sample Output 1
2

Explanation 1
Sum = A/(1-R) = 1/(1-0.5) = 1/0.5 = 2

Constraints
0 < A < 100000

0 < R < 1

Resource
https://www.cquestions.com/2011/07/write-c-program-to-find-out-sum-of_5747.html
------------------------------------------------------------Solution-----------------------------------------------------------------------------------

def seriesSumII(A, R):
    return (A/(1-R))

def main():

    [A, R] = list(map(float, input().split()))

    result = seriesSumII(A, R)

    print(result)


if __name__ == "__main__":
    main()

---------------------------------------------------------------------------------------------------------------------------------------------------------