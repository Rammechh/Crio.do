1)SpiralMatrixII

Problem Description
Given an integer A, generate a square matrix filled with elements from 1 to A*A in spiral order. The spiral order will be clockwise in nature starting from (0,0)

Input format
One line of input, containing a single integer A.

Output format
Print a 2-d matrix of size A x A satisfying the spiral order.

Sample Input 1
3

Sample Output 1
1 2 3

8 9 4

7 6 5

Explanation
As you can see the matrix goes spirally with each next position incremented by one.

Constraints
1<=A<=1000

Resources
Print a given matrix in spiral form (https://www.geeksforgeeks.org/print-a-given-matrix-in-spiral-form/)

Two-dimensional matrix implementation for c++ (https://www.geeksforgeeks.org/multidimensional-arrays-c-cpp/)

Two-dimensional matrix implementation for java (https://www.geeksforgeeks.org/multidimensional-arrays-in-java/)

Two-dimensional matrix implementation for python (https://www.geeksforgeeks.org/python-using-2d-arrays-lists-the-right-way/) 

Two-dimensional matrix implementation for javascript(https://www.geeksforgeeks.org/how-to-create-two-dimensional-array-in-javascript/)

-----------------------------------------------------------Solution------------------------------------------------------------------------------
def spiralMatrixII(n):
    top=0
    left=0
    down=n-1
    right=n-1
    dir=0
    a=1
    res=[[0 for x in range (n)] for y in range(n)]
    while top<=down and left<=right:
        if dir==0:
            for i in range(left,right+1):
                res[top][i]=a
                a+=1
            top+=1
        elif dir==1:
            for i in range(top,down+1):
                res[i][right]=a
                a+=1
                #res.append(matrix[i][right])
            right-=1
        elif dir==2:
            for i in range(right,left-1,-1):
                res[down][i]=a
                a+=1
                #res.append(matrix[down][i])
            down-=1
        elif dir==3:
            for i in range(down,top-1,-1):
                res[i][left]=a
                a+=1
                #res.append(matrix[i][left])
            left+=1 
        dir=(dir+1)%4
            
    return(res)

def main():
    n = int(input())
    matrix = spiralMatrixII(n)
    for row in matrix:
        print(*row)

if __name__=="__main__":
    main()
	
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2)FirstMissingPositive

Problem Description
Given an unsorted array of integers, find the smallest missing positive integer.

Input format
There are 2 lines of input.

First line contains 1 integer N - Number of elements in the array.

Second line contains space separated N integers.

Output format
Print the smallest missing positive integer.

Sample Input 1
4

3 4 -1 1

Sample Output 1
2

Explanation 1
2 is the smallest positive integer which is missing as 1 is already present in the array. Note that 0 will not be considered as positive.

Constraints
N <= 200000

-2 ^ 31 <= Range of values <= 2 ^ 31 - 1

Resource
Missing Smallest Positive Number (https://www.youtube.com/watch?v=-lfHWWMmXXM)

Smallest Missing Positive Number (https://www.geeksforgeeks.org/find-the-smallest-positive-number-missing-from-an-unsorted-array/)

-----------------------------------------------------------------Solution------------------------------------------------------------------------------
def firstMissingPositive(nums):
    pos=[i for i in nums if i>0]
    Min=1
    for i in sorted(pos):
        if i==Min:
            Min+=1
        else:
            break
    return Min
if __name__ == '__main__':
    n = int(input())
    nums = []
    if n > 0:
        nums = input().split()
        nums = [int(i) for i in nums]

    result = firstMissingPositive(nums)
    print(result)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3)AddNumbers

Problem Description
Add two numbers represented by two arrays A & B and return the resulting sum as an array.

Input format
There are three lines of input.

First line will contain two space separated integers N and M respectively.

Next line will contain N space separated integers for Array A.

Next line will contain M space separated integers for Array B.

Output format
Single integer which will be the sum of the two numbers.

Sample Input 1
4 3

1 1 2 4

4 5 8

Sample Output 1
1582

Explanation
1124 + 458 = 1582

Constraints
0<=Ai<10

0<=Bi<10

Most significant value will be non-zero in both array.

1<=N, M<=5000

Resource
Programming Interviews: Add Two Very Large Number (out of range of int) (https://www.youtube.com/watch?v=pP6GWIaiELM)

-----------------------------------------------------------------------------------Solution------------------------------------------------------------------------------
def addNumbers(n, m, firstNum, secondNum):
    if n>m:
        temp=firstNum
        firstNum=secondNum
        secondNum=temp
    Min=min(n,m)
    Sum=""
    carry=0
    firstNum=firstNum[::-1]
    secondNum=secondNum[::-1]
    for i in range(Min):
        add=int(firstNum[i])+int(secondNum[i])+carry
        Sum+=str(add%10)
        if add>9:
            carry=1
        else:
            carry=0

    for i in range(Min,len(secondNum)):
        add=int(secondNum[i])+carry
        Sum+=str(add%10)
        if add>9:
            carry=1
        else:
            carry=0

    if carry:
        Sum+=str(carry)

    return Sum[::-1]

def main():
    n, m = map(int, input().split())
    firstNum = list(map(int, input().split()))
    secondNum = list(map(int, input().split()))
    result = addNumbers(n, m, firstNum, secondNum)
    print(*result, sep="")


if __name__ == "__main__":
    main()
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4)IncrementNumber

Problem Description
Given a number represented as an array of digits, increment the number by 1, and return the resulting sum as an array.

Input format
There are two lines of input.

First line will contain a single integer N .

Next line will contain N space separated integers for Array A.

Output format
Single integer which will be the incremented number.

Sample Input 1
3

1 1 1

Sample Output 1
112

Explanation
111 + 1 = 112

Constraints
0<=Ai<10

Most significant value will be non-zero in the array.

1<=N<=5000

Resource
Increment An Integer Represented As An Array (https://www.youtube.com/watch?v=vA0t42qwKO0)


-------------------------------------------------------------------------------Solution------------------------------------------------------------------------------
def incrementNumber(n, number):
    arr=int("".join(map(str,number)))
    arr+=1
    return(str(arr))

def main():
    n = int(input())
    number = list(map(int, input().split()))
    result = incrementNumber(n, number)
    print(*result, sep="")


if __name__ == "__main__":
    main()

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6)PascalsTriangle


Problem Description
Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it.

Input format
First line contains 1 non-negative integer N

Output format
Print the first N rows of Pascal’s triangle.

Sample Input 1
5

Sample Output 1
1

1 1

1 2 1

1 3 3 1

1 4 6 4 1

Explanation 1
The number ‘2’ in 3rd row came from the addition of 1 & 1 from the 2nd row.

Similarly ‘3’ came from 1+2, 4 from 1+3 and 6 from 3+3.

Constraints
N <= 15

Resource
Definition of Pascal’s Triangle https://en.wikipedia.org/wiki/Pascal%27s_triangle

https://www.geeksforgeeks.org/pascal-triangle/


-------------------------------------------------------------------------------Solution------------------------------------------------------------------------------
1)
def pascalsTriangle(n):
    res=[]
    res.append([1])
    if n==1:
        return res
    res.append([1,1])
    if n==2:
        return res
    for i in range(2,n):
        temp=[]
        for j in range(i+1):
            if j==0 or j==i:
                temp.append(1)
            else:
                add=res[i-1][j-1]+res[i-1][j]
                temp.append(add)
        res.append(temp)
    return res
if __name__ == '__main__':
    n = int(input())
    result = pascalsTriangle(n)
    for row in result:
        print(*row)


		
2)
def pascalsTriangle(n):
    res=[[] for i in range(n)]
    for i in range(n):
        for j in range(i+1):
            if j==0 or j==i:
                res[i].append(1)
            else:
                res[i].append(res[i-1][j-1]+res[i-1][j])
    #print(res)
    return res
if __name__ == '__main__':
    n = int(input())
    result = pascalsTriangle(n)
    for row in result:
        print(*row)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7)RotateImage

Problem Description
You are given an n x n 2D matrix representing an image.

Rotate the image by 90 degrees (clockwise).

Note:

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly.

DO NOT allocate another 2D matrix and do the rotation.

Input format
First line contains one integer N.

Next N line contains N space separated integers

Output format
Print the NxN rotated matrix.

Sample Input 1
3

1 2 3

4 5 6

7 8 9

Sample Output 1
7 4 1

8 5 2

9 6 3

Sample Input 2
4

5 1 9 11

2 4 8 10

13 3 6 7

15 14 12 16

Sample Output 2
15 13 2 5

14 3 4 1

12 6 8 9

16 7 10 11

Constraints
1 <= n <= 100

Resource
Two-dimensional matrix implementation for c++ https://www.geeksforgeeks.org/multidimensional-arrays-c-cpp/

Two-dimensional matrix implementation for java https://www.geeksforgeeks.org/multidimensional-arrays-in-java/

Two-dimensional matrix implementation for python https://www.geeksforgeeks.org/python-using-2d-arrays-lists-the-right-way/

Two-dimensional matrix implementation for javascript https://www.geeksforgeeks.org/how-to-create-two-dimensional-array-in-javascript/

Image of Matrix https://www.youtube.com/watch?v=SA867FvqHrM
--------------------------------------------------------------------------Solution-------------------------------------------------------------------------------------------
1)
from crio.io import PrintMatrix

class Solution:
    def __init__(self, matrix):
        self.matrix = matrix

    def rotateImage(self):
        l=len(self.matrix)
        for i in range(l):
            for j in range(i,l):
                self.matrix[j][i],self.matrix[i][j]=self.matrix[i][j],self.matrix[j][i]
        for i in range(l):
            matrix[i]=matrix[i][::-1]
            
if __name__ == '__main__':
    n = int(input())
    matrix = []
    for i in range(n):
        nums = input().split()
        nums = [int(i) for i in nums]
        matrix.append(nums)
    sol = Solution(matrix)
    sol.rotateImage()
    PrintMatrix.SquareMatrix(sol.matrix)

2)
from crio.io import PrintMatrix

class Solution:
    def __init__(self, matrix):
        self.matrix = matrix

    def rotateImage(self):
        l=len(self.matrix)
        a=[[0 for i in range(l)]for j in range(l)]
        b=self.matrix
        for i in range(l):
            for j in range(l):
                a[j][i]=self.matrix[i][j]
        k=0
        for i in a:
            self.matrix[k]=i[::-1]
            k+=1
        #return self.matrix
if __name__ == '__main__':
    n = int(input())
    matrix = []
    for i in range(n):
        nums = input().split()
        nums = [int(i) for i in nums]
        matrix.append(nums)
    sol = Solution(matrix)
    sol.rotateImage()
    PrintMatrix.SquareMatrix(sol.matrix)


3)
from crio.io import PrintMatrix

class Solution:
    def __init__(self, matrix):
        self.matrix = matrix

    def rotateImage(self):
        l=len(self.matrix)
        a=[[0 for i in range(l)]for j in range(l)]
        for i in range(l):
            for j in range(l):
                a[j][i]=self.matrix[i][j]

        for i in a:
            print(*i[::-1])

if __name__ == '__main__':
    n = int(input())
    matrix = []
    for i in range(n):
        nums = input().split()
        nums = [int(i) for i in nums]
        matrix.append(nums)
    sol = Solution(matrix)
    sol.rotateImage()
    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9)SetMatrixZeroes

Problem Description
Given a m x n matrix, if an element is 0, set its entire row and column to 0.

Do it in-place.

Input format
First line contains 2 integers m,n - number of rows and columns respectively.

Next m lines contain space separated n integers.

Output format
Output the same matrix.

Sample Input 1
3 3

1 1 1

1 0 1

1 1 1

Sample Output 1
1 0 1

0 0 0

1 0 1

Explanation 1
There is one ‘0’ in 2nd row and 2nd column, so all the elements in that row and column become 0.

Sample Input 2
3 4

0 1 2 0

3 4 5 2

1 3 1 5

Sample Output 2
0 0 0 0

0 4 5 0

0 3 1 0

Explanation 2
1st row, 1st column and 4th column all contains ‘0’, so all the values in these rows & columns becomes 0.

Constraints
M,N <= 500

Resource
Two-dimensional matrix implementation for c++ (https://www.geeksforgeeks.org/multidimensional-arrays-c-cpp/)

Two-dimensional matrix implementation for java (https://www.geeksforgeeks.org/multidimensional-arrays-in-java/)

Two-dimensional matrix implementation for python (https://www.geeksforgeeks.org/python-using-2d-arrays-lists-the-right-way/)

Two-dimensional matrix implementation for javascript (https://www.geeksforgeeks.org/how-to-create-two-dimensional-array-in-javascript/)

https://www.youtube.com/watch?v=M65xBewcqcI
---------------------------------------------------------------------------------------Solution------------------------------------------------------------------------------
def setMatrixZeroes(grid):
    def matrix(row,col,i,j):
        for i in range(n):
            for j in range(m):
                if i==row:
                    grid[i][j]=0
                if j==col:
                    grid[i][j]=0
        return grid
    n=len(grid)
    m=len(grid[0])
    row=[]
    col=[]
    for i in range(n):
        for j in range(m):
            if grid[i][j]==0:
                row.append(i)
                col.append(j)
    for i in range(len(row)):
        res= matrix(row[i],col[i],i,j)
    return res
    

if __name__ == '__main__':
    row = input().split()
    n = int(row[0])
    m = int(row[1])
    grid = []
    for i in range(n):
        nums = input().split()
        nums = [int(i) for i in nums]
        grid.append(nums)
    setMatrixZeroes(grid)
    for row in grid:
        print(*row)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
